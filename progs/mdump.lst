                        ; Program to display (on pixie) memory, byte-by-byte.
                        ; requires at least 2K of RAM (uses 1K video buffer at 0400h).
                        
                        ; Operation:
                        ; starts by displaying location 0000 address and contents.
                        ; Press IN with toggle 7 off to step +1.
                        ; Press IN with toggle 7 on to step -1.
                        ; Press a hex key with toggle 0 on to change address
                        ; Press a hex key with toggle 0 off to alter data
                        ; Press IN with toggle 1 on to GOTO current address
                        
   0001                 double	equ	1	; use double-lines in video
   0001                 hexinp	equ	1	; use hex keypad for data input, else only IN +/- step
                        
                        ; video RAM buffer must be aligned...
                        ; Registers:
   0001                 s$intr	equ	1	; interrupt routine (always R(1))
   0002                 s$stk	equ	2	; stack area for interrupt (X in intr)
   0003                 s$main	equ	3	; R(3) = main...
   0004                 s$scr	equ	4	; scratch-pad area - keypad index, X
   0005                 s$key	equ	5	; R(5) = keypd
   0006                 s$ptr	equ	6	; mem ptr
   0007                 s$putc	equ	7	; R(7) = putc
   0008                 s$nib	equ	8	; R(8) = nibble
   0009                 s$byt	equ	9	; R(9) = byte
   000b                 s$clr	equ	11	; R(11) = clear
   000c                 C	equ	12	; nibble/putc: character pattern from table
   000d                 V	equ	13	; global: current video location ("cursor") for putc
   000e                 tmp	equ	14	; clear/putc: temp video buf ptr
   000f                 cnt	equ	15	; R(cnt).0: clear/putc: should not disturb R(cnt).1
                        			; R(cnt).1: byte: to save value between nibble
                        
   0000                 	org	0
                        ;----------------------------------
                        ; initialize
   0000   f8 05         	ldi	scratch.0
   0002   a4            	plo	s$scr
   0003   f8 02         	ldi	scratch.1
   0005   b4            	phi	s$scr
   0006   e4            	sex	s$scr
   0007   f8 50         	ldi	keypd.0
   0009   a5            	plo	s$key
   000a   f8 00         	ldi	keypd.1
   000c   b5            	phi	s$key
   000d   f8 83         	ldi	putc.0
   000f   a7            	plo	s$putc
   0010   f8 00         	ldi	putc.1
   0012   b7            	phi	s$putc
   0013   f8 9d         	ldi	nibble.0
   0015   a8            	plo	s$nib
   0016   f8 00         	ldi	nibble.1
   0018   b8            	phi	s$nib
   0019   f8 ae         	ldi	byte.0
   001b   a9            	plo	s$byt
   001c   f8 00         	ldi	byte.1
   001e   b9            	phi	s$byt
   001f   f8 70         	ldi	clear.0
   0021   ab            	plo	s$clr
   0022   f8 00         	ldi	clear.1
   0024   bb            	phi	s$clr
   0025   f8 40         	ldi	intr.0
   0027   a1            	plo	s$intr
   0028   f8 00         	ldi	intr.1
   002a   b1            	phi	s$intr
   002b   f8 04         	ldi	stack.0
   002d   a2            	plo	s$stk
   002e   f8 02         	ldi	stack.1
   0030   b2            	phi	s$stk
   0031   f8 00         	ldi	video.0
   0033   ad            	plo	V
   0034   f8 04         	ldi	video.1
   0036   bd            	phi	V	; V = video
                        	; transfer control to main (new PC)
   0037   f8 b8         	ldi	main.0
   0039   a3            	plo	s$main
   003a   f8 00         	ldi	main.1
   003c   b3            	phi	s$main
   003d   d3            	sep	s$main
                        ;
                        ; video refresh interrupt
   003e   72            r$intr:	ldxa
   003f   70            	ret
   0040   22            intr:	dec	s$stk
   0041   78            	sav
   0042   22            	dec	s$stk
   0043   52            	str	s$stk
   0044   c4            	nop
   0045   c4            	nop
   0046   c4            	nop
   0047   f8 04         	ldi	video.1
   0049   b0            	phi	0
   004a   f8 00         	ldi	video.0
   004c   a0            	plo	0
   004d   30 3e         	br	r$intr
                        
                        ; Get digit from hex keypad, or IN button press.
                        ; Returns D = digit or Q=1 if IN pressed.
                        ; Assume X=2=scratch, uses M(R(X)) and R(tmp)
                        ; NOTE: starting value in M(R(X)) does not matter.
   004f   d3            r$kpd:	sep	s$main	; return to main
   0050   37 6a         keypd:	b4	keypd1	; IN pressed instead...
   0052   f0            	ldx
   0053   fc 01         	adi	1
   0055   fa 0f         	ani	0fh
   0057   54            	str	s$scr
   0058   62            	out	2	; keypad index
   0059   24            	dec	s$scr	; adjust for OUT
   005a   3d 50         	bn2	keypd	; loop until key pressed
   005c   7b            	seq		; visual indicator (key click?)
   005d   f8 09         	ldi	9
   005f   be            	phi	tmp	; 9*256 (tmp.0 may have residual?)
   0060   2e            keypd0:	dec	tmp
   0061   9e            	ghi	tmp
   0062   3a 60         	bnz	keypd0	; debounce 2048 loops
                        	;req		; for key click, need short blip
   0064   35 64         	b2	$.0	; wait for key released
   0066   7a            	req		; for visual indicator...
   0067   f0            	ldx		; get keypd index, 0-15
   0068   30 4f         	br	r$kpd	; return
   006a   37 6a         keypd1:	b4	$.0	; wait for release
   006c   7b            	seq		; signal IN pressed
   006d   30 4f         	br	r$kpd	; return
                        
                        ; clear screen line
   006f   d3            r$clr:	sep	s$main	; only called from main
   0070                 clear:
   0070   8d            	glo	V
   0071   ae            	plo	tmp
   0072   9d            	ghi	V
   0073   be            	phi	tmp	; tmp = V
   0001                  if double
   0074   f8 80         	ldi	128
                         else
                        	ldi	64
                         endi
   0076   af            	plo	cnt
   0077   f8 00         clear0:	ldi	0
   0079   5e            	str	tmp
   007a   1e            	inc	tmp
   007b   2f            	dec	cnt
   007c   8f            	glo	cnt
   007d   3a 77         	bnz	clear0
   007f   30 6f         	br	r$clr
                        
   0081   1d            r$putc:	inc	V	; next location (caller checks overflow)
   0082   d8            	sep	s$nib	; only called from 'nibble'
   0083   9d            putc:	ghi	V
   0084   be            	phi	tmp	; tmp = V
   0085   8d            	glo	V
   0086   ae            	plo	tmp	; tmp = V
   0087   f8 08         	ldi	8
   0089   af            	plo	cnt
   008a                 putc0:
   0001                  if double
   008a   0c            	ldn	C	; D = M(R(C))
   008b   5e            	str	tmp
   008c   8e            	glo	tmp
   008d   fc 08         	adi	8
   008f   ae            	plo	tmp	; tmp += 8
                         endi
   0090   4c            	lda	C	; D = M(R(C)++)
   0091   5e            	str	tmp
   0092   8e            	glo	tmp
   0093   fc 08         	adi	8
   0095   ae            	plo	tmp	; tmp += 8
   0096   2f            	dec	cnt
   0097   8f            	glo	cnt
   0098   3a 8a         	bnz	putc0
   009a   30 81         	br	r$putc
                        
                        ; Display hex digit (nibble) on screen at V
                        ; Only called from 'byte'
   009c   d9            r$nib:	sep	s$byt
   009d                 nibble:
   009d   fa 0f         	ani	0fh
                        	; D = nibble (0-15)
   009f   fe            	shl
   00a0   fe            	shl
   00a1   fe            	shl	; D *= 8
   00a2   fc 06         	adi	hextbl.0
   00a4   ac            	plo	C
   00a5   f8 01         	ldi	hextbl.1
   00a7   7c 00         	adci	0	; C = &hextbl[key]
   00a9   bc            	phi	C
                        	; R(C) = character pattern
   00aa   d7            	sep	s$putc
   00ab   30 9c         	br	r$nib
                        
   00ad   d3            r$byt:	sep	s$main	; only called from main
   00ae                 byte:	; D = byte
   00ae   bf            	phi	cnt	; safe?
   00af   f6            	shr
   00b0   f6            	shr
   00b1   f6            	shr
   00b2   f6            	shr
   00b3   d8            	sep	s$nib
   00b4   9f            	ghi	cnt
   00b5   d8            	sep	s$nib
   00b6   30 ad         	br	r$byt
                        
   00b8                 main:
                        	; setup video...
   00b8   69            	inp	1	; enable video
                        	; TODO: enter address from hex keypad
   00b9   f8 00         	ldi	0
   00bb   a6            	plo	s$ptr
   00bc   b6            	phi	s$ptr
   00bd                 loop:
                        	; display R(ptr) and M(R(ptr)) on screen...
   00bd   96            	ghi	s$ptr
   00be   d9            	sep	s$byt
   00bf   86            	glo	s$ptr
   00c0   d9            	sep	s$byt
   00c1   1d            	inc	V	; leave blank space
   00c2   06            	ldn	s$ptr
   00c3   d9            	sep	s$byt
   00c4   f8 00         	ldi	video.0
   00c6   ad            	plo	V	; effective CR
   0001                  if hexinp
   00c7   d5            	sep	s$key	; call keypd (or IN)
   00c8   31 eb         	bq	input	; must REQ...
                        	; else M(R(X)) contains key...
   00ca   14            	inc	s$scr
   00cb   6c            	inp	4	; get switches - destroys M(R(X))!
   00cc   24            	dec	s$scr
   00cd   76            	shrc		; test switch 0
   00ce   33 d9         	bdf	doadr
                        	; update M(R(ptr)) data
   00d0   06            	ldn	s$ptr
   00d1   fe            	shl
   00d2   fe            	shl
   00d3   fe            	shl
   00d4   fe            	shl
   00d5   f1            	or	; D |= M(R(X))
   00d6   56            	str	s$ptr
   00d7   30 bd         	br	loop
   00d9                 doadr:
                        	; shift R(ptr) << 4
   00d9   f8 04         	ldi	4
   00db   af            	plo	cnt
   00dc   86            doadr0:	glo	s$ptr
   00dd   fe            	shl
   00de   a6            	plo	s$ptr
   00df   96            	ghi	s$ptr
   00e0   7e            	shlc		; carry from ptr.0
   00e1   b6            	phi	s$ptr
   00e2   2f            	dec	cnt
   00e3   8f            	glo	cnt
   00e4   3a dc         	bnz	doadr0
   00e6   86            	glo	s$ptr	; now merge key
   00e7   f1            	or	; D |= M(R(X))
   00e8   a6            	plo	s$ptr
   00e9   30 bd         	br	loop
                        
   00eb   7a            input:	req
                         else
                        	bn4	$.0	; wait for IN
                        	b4	$.0	; wait for release
                         endi
   00ec   6c            	inp	4	; get switches - destroys M(R(X))!
   00ed   7e            	shlc		; switch 7 "on"?
   00ee   33 f7         	bdf	back
   00f0   fa 04         	ani	00000100b	; switch 1 in new position
   00f2   3a fa         	bnz	goto
                        	; forward step...
   00f4   16            	inc	s$ptr
   00f5   30 bd         	br	loop
   00f7   26            back:	dec	s$ptr
   00f8   30 bd         	br	loop
   00fa                 goto:	; transition to temp PC, then setup s$main
   00fa   f8 01         	ldi	goto0.0
   00fc   a4            	plo	s$scr
   00fd   f8 01         	ldi	goto0.1
   00ff   b4            	phi	s$scr
   0100   d4            	sep	s$scr
                        	;page	; if we're too close to end of page 0...
   0101   86            goto0:	glo	s$ptr
   0102   a3            	plo	s$main
   0103   96            	ghi	s$ptr
   0104   b3            	phi	s$main
   0105   d3            	sep	s$main	; goto R(ptr), PC=3
                        
                        ; The character generator:
   0106                 hextbl:
                        	; "0"
   0106   70            	db	01110000b
   0107   88            	db	10001000b
   0108   98            	db	10011000b
   0109   a8            	db	10101000b
   010a   c8            	db	11001000b
   010b   88            	db	10001000b
   010c   70            	db	01110000b
   010d   00            	db	0
                        	; "1"
   010e   20            	db	00100000b
   010f   60            	db	01100000b
   0110   20            	db	00100000b
   0111   20            	db	00100000b
   0112   20            	db	00100000b
   0113   20            	db	00100000b
   0114   70            	db	01110000b
   0115   00            	db	0
                        	; "2"
   0116   70            	db	01110000b
   0117   88            	db	10001000b
   0118   08            	db	00001000b
   0119   70            	db	01110000b
   011a   80            	db	10000000b
   011b   80            	db	10000000b
   011c   f8            	db	11111000b
   011d   00            	db	0
                        	; "3"
   011e   70            	db	01110000b
   011f   88            	db	10001000b
   0120   08            	db	00001000b
   0121   70            	db	01110000b
   0122   08            	db	00001000b
   0123   88            	db	10001000b
   0124   70            	db	01110000b
   0125   00            	db	0
                        	; "4"
   0126   18            	db	00011000b
   0127   28            	db	00101000b
   0128   48            	db	01001000b
   0129   f8            	db	11111000b
   012a   08            	db	00001000b
   012b   08            	db	00001000b
   012c   08            	db	00001000b
   012d   00            	db	0
                        	; "5"
   012e   f8            	db	11111000b
   012f   80            	db	10000000b
   0130   f0            	db	11110000b
   0131   08            	db	00001000b
   0132   08            	db	00001000b
   0133   88            	db	10001000b
   0134   70            	db	01110000b
   0135   00            	db	0
                        	; "6"
   0136   30            	db	00110000b
   0137   40            	db	01000000b
   0138   80            	db	10000000b
   0139   f0            	db	11110000b
   013a   88            	db	10001000b
   013b   88            	db	10001000b
   013c   70            	db	01110000b
   013d   00            	db	0
                        	; "7"
   013e   f8            	db	11111000b
   013f   08            	db	00001000b
   0140   08            	db	00001000b
   0141   10            	db	00010000b
   0142   20            	db	00100000b
   0143   40            	db	01000000b
   0144   80            	db	10000000b
   0145   00            	db	0
                        	; "8"
   0146   70            	db	01110000b
   0147   88            	db	10001000b
   0148   88            	db	10001000b
   0149   70            	db	01110000b
   014a   88            	db	10001000b
   014b   88            	db	10001000b
   014c   70            	db	01110000b
   014d   00            	db	0
                        	; "9"
   014e   70            	db	01110000b
   014f   88            	db	10001000b
   0150   88            	db	10001000b
   0151   78            	db	01111000b
   0152   08            	db	00001000b
   0153   08            	db	00001000b
   0154   70            	db	01110000b
   0155   00            	db	0
                        	; "A"
   0156   70            	db	01110000b
   0157   88            	db	10001000b
   0158   88            	db	10001000b
   0159   f8            	db	11111000b
   015a   88            	db	10001000b
   015b   88            	db	10001000b
   015c   88            	db	10001000b
   015d   00            	db	0
                        	; "B"
   015e   f0            	db	11110000b
   015f   88            	db	10001000b
   0160   88            	db	10001000b
   0161   f0            	db	11110000b
   0162   88            	db	10001000b
   0163   88            	db	10001000b
   0164   f0            	db	11110000b
   0165   00            	db	0
                        	; "C"
   0166   70            	db	01110000b
   0167   88            	db	10001000b
   0168   80            	db	10000000b
   0169   80            	db	10000000b
   016a   80            	db	10000000b
   016b   88            	db	10001000b
   016c   70            	db	01110000b
   016d   00            	db	0
                        	; "D"
   016e   f0            	db	11110000b
   016f   88            	db	10001000b
   0170   88            	db	10001000b
   0171   88            	db	10001000b
   0172   88            	db	10001000b
   0173   88            	db	10001000b
   0174   f0            	db	11110000b
   0175   00            	db	0
                        	; "E"
   0176   f8            	db	11111000b
   0177   80            	db	10000000b
   0178   80            	db	10000000b
   0179   f0            	db	11110000b
   017a   80            	db	10000000b
   017b   80            	db	10000000b
   017c   f8            	db	11111000b
   017d   00            	db	0
                        	; "F"
   017e   f8            	db	11111000b
   017f   80            	db	10000000b
   0180   80            	db	10000000b
   0181   f0            	db	11110000b
   0182   80            	db	10000000b
   0183   80            	db	10000000b
   0184   80            	db	10000000b
   0185   00            	db	0
                        
   0200                 ram	equ	0200h	; above code must not overflow...
   0204                 stack	equ	ram + 4	; 4 locations *prior* to this, 1 after (buffer)
   0205                 scratch	equ	stack + 1	; 2 locations...
                        ;next	equ	scratch + 2...
                        
   0400                 video	equ	0400h
                        
   0186                 	end
000c  C             000d  V             00f7  back          00ae  byte      
0070  clear         0077  clear0        000f  cnt           00d9  doadr     
00dc  doadr0        0001  double        00fa  goto          0101  goto0     
0001  hexinp        0106  hextbl        00eb  input         0040  intr      
0050  keypd         0060  keypd0        006a  keypd1        00bd  loop      
00b8  main          009d  nibble        0083  putc          008a  putc0     
00ad  r$byt         006f  r$clr         003e  r$intr        004f  r$kpd     
009c  r$nib         0081  r$putc        0200  ram           0009  s$byt     
000b  s$clr         0001  s$intr        0005  s$key         0003  s$main    
0008  s$nib         0006  s$ptr         0007  s$putc        0004  s$scr     
0002  s$stk         0205  scratch       0204  stack         000e  tmp       
0400  video         
